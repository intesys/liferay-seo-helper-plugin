/**
 * Copyright (c) 1995-present INTESYS S.R.L., Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
package it.intesys.seo.helper.listener;

import java.util.List;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import com.liferay.journal.model.JournalArticle;
import com.liferay.portal.kernel.exception.ModelListenerException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.BaseModelListener;
import com.liferay.portal.kernel.model.Layout;
import com.liferay.portal.kernel.model.ModelListener;

import it.intesys.seo.helper.service.PageGeneratorService;

/**
 * Listener for pages in order to keep current the association between page and
 * web content. In particular, the things to update are: the SEO description of
 * the page with the article description, the friendlyURL of the child pages
 * that were automatically generated from an article by selecting a parent page
 * and not a category
 */
@Component(immediate = true, service = ModelListener.class)
public class SyncLayoutWithJournalArticleListener
	extends BaseModelListener<Layout> {

	@Override
	public void onAfterUpdate(Layout layout)
		throws ModelListenerException {

		try {
			if (pageGeneratorService.isPageGenerated(layout)) {
				onAfterUpdateGeneratedLayout(layout);
				for (Layout child : layout.getChildren()) {
					onAfterUpdateParentLayout(layout, child);
				}
			}
		}
		catch (Exception e) {
			_log.error(
				String.format(
					"Cannot keep sync'd articles associated with page with pkey %d. Exception is: ",
					layout.getPrimaryKey()),
				e);
		}

		super.onAfterUpdate(layout);
	}

	private void onAfterUpdateGeneratedLayout(Layout layout)
		throws Exception {

		List<JournalArticle> articles =
			pageGeneratorService.getUpdateableArticles(
				layout.getGroupId(), layout.getUuid());
		for (JournalArticle article : articles) {
			try {
				if (layout.getParentPlid() == 0 ||
					pageGeneratorService.getSeoVocabularyId(article) > 0) {
					return;
				}
			}
			catch (Exception e) {
				_log.warn(
					"Article " + article.getArticleId() + " with layoutUuid=" +
						article.getLayoutUuid() +
						" has no vocabularyId associated",
					e);
			}
			pageGeneratorService.updateFriendlyUrls(layout, article);
		}
	}

	private void onAfterUpdateParentLayout(Layout parent, Layout child)
		throws Exception {

		List<JournalArticle> articles =
			pageGeneratorService.getUpdateableArticles(
				child.getGroupId(), child.getUuid());

		if (!articles.isEmpty()) {
			// page generated by this plugin
			for (JournalArticle article : articles) {
				long seoVocabularyId = 0;

				try {
					seoVocabularyId =
						pageGeneratorService.getSeoVocabularyId(article);
					if (seoVocabularyId > 0) {
						// page generated with categories
						continue;
					}
				}
				catch (Exception e) {
					_log.warn(
						"Article " + article.getArticleId() +
							" with layoutUuid=" + article.getLayoutUuid() +
							" has no vocabularyId associated",
						e);
				}

				pageGeneratorService.updateLayoutFriendlyUrls(
					article, parent, child);
			}
		}
	}

	@Reference
	private PageGeneratorService pageGeneratorService;

	private static final Log _log =
		LogFactoryUtil.getLog(SyncLayoutWithJournalArticleListener.class);

}

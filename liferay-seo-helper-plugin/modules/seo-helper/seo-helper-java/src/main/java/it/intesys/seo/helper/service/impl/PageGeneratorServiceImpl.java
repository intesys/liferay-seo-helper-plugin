/**
 * Copyright (c) 1995-present INTESYS S.R.L., Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
package it.intesys.seo.helper.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import com.liferay.asset.kernel.model.AssetCategory;
import com.liferay.asset.kernel.model.AssetEntry;
import com.liferay.asset.kernel.service.persistence.AssetEntryQuery;
import com.liferay.journal.model.JournalArticle;
import com.liferay.journal.model.JournalArticleConstants;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.Group;
import com.liferay.portal.kernel.model.Layout;
import com.liferay.portal.kernel.model.LayoutSet;
import com.liferay.portal.kernel.service.CompanyLocalService;
import com.liferay.portal.kernel.service.GroupLocalService;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.ServiceContextFactory;
import com.liferay.portal.kernel.service.ServiceContextThreadLocal;
import com.liferay.portal.kernel.service.UserLocalService;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.FriendlyURLNormalizerUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.PropertiesParamUtil;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.UnicodeProperties;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import it.intesys.seo.helper.bean.SeoBean;
import it.intesys.seo.helper.bean.SeoRenderBean;
import it.intesys.seo.helper.common.constants.ParamKeys;
import it.intesys.seo.helper.common.constants.ParamValues;
import it.intesys.seo.helper.service.PageGeneratorService;

@Component(immediate = true, service = PageGeneratorService.class)
public class PageGeneratorServiceImpl implements PageGeneratorService {

	@Override
	public void deleteLayoutIfExistsAndGeneratedByPageGenerator(
		JournalArticle article)
		throws Exception {

		Layout layout = _layoutHelper.fetchByUuidGroupId(
			article.getLayoutUuid(), article.getGroupId());

		if (layout != null) {
			if (_expandoHelper.isPageGenerated(layout)) {
				_log.info(
					String.format(
						"Layout generated by page generator with uuid %s; deleting layout and associated resources",
						layout.getUuid()));
				_layoutHelper.deleteByPlid(layout.getPlid());
			}
		}
	}

	@Override
	public JournalArticle fetchJournalArticleByGroupIdArticleId(
		long groupId, String articleId)
		throws Exception {

		return _journalArticleHelper.fetchJournalArticleByGroupIdArticleId(
			groupId, articleId);
	}

	public Layout fetchLayout(String layoutUuid, long groupId)
		throws Exception {

		return _layoutHelper.fetchByUuidGroupId(layoutUuid, groupId);
	}

	@Override
	public Layout generatePage(SeoBean bean)
		throws Exception {

		if (Validator.isNull(bean.getServiceContext())) {
			bean.setServiceContext(new ServiceContext());
		}

		JournalArticle article =
			_journalArticleHelper.fetchArticleByPrimaryKey(bean.getArticlePrimaryKey());
		Company company =
			_companyLocalService.getCompanyById(article.getCompanyId());
		long userId = company.getDefaultUser().getUserId();

		Layout parentLayout = _layoutHelper.fetchByPlid(bean.getParentPlid());

		Map<Locale, String> friendlyURLMap =
			getFriendlyUrlMap(parentLayout, article, bean.getVocabularyId());
		Layout layout = _layoutHelper.getChildLayout(
			parentLayout, friendlyURLMap, article, bean, userId);
		_expandoHelper.remember(layout);

		article.setLayoutUuid(layout.getUuid());
		_expandoHelper.deleteUpdateJournalArticle(
			article, parentLayout, bean.getVocabularyId());
		_journalArticleHelper.updateArticle(article);

		return layout;
	}

	@Override
	public List<JournalArticle> getArticlesAndChildLayoutArticles(
		Layout layout) {

		List<JournalArticle> articles = new ArrayList<>();

		articles.addAll(_journalArticleHelper.getAllArticlesByLayout(layout));

		for (Layout child : layout.getAllChildren()) {
			articles.addAll(
				_journalArticleHelper.getAllArticlesByLayout(child));
		}

		return articles;
	}

	@Override
	public String getAssetEntryLayoutFriendlyUrl(
		long groupId, long articleResourcePk, String languageId)
		throws Exception {

		String friendlyUrl;

		JournalArticle article =
			_journalArticleHelper.fetchLatestArticleByResourcePrimKey(
				articleResourcePk);
		String layoutUuid = article.getLayoutUuid();

		Locale locale = LocaleUtil.fromLanguageId(languageId);

		if (Validator.isNull(layoutUuid)) {
			friendlyUrl = StringPool.BLANK;
		}
		else {
			ThemeDisplay themeDisplay =
				ServiceContextThreadLocal.getServiceContext().getThemeDisplay();

			if (themeDisplay == null) {
				// here an asset publisher is working asynchronously
				friendlyUrl =
					_layoutHelper.getFriendlyUrl(layoutUuid, groupId, locale);
			}
			else {
				Layout layout =
					_layoutHelper.fetchByUuidGroupId(layoutUuid, groupId);
				friendlyUrl = PortalUtil.getLayoutFriendlyURL(
					layout, themeDisplay, locale);
			}
		}

		return friendlyUrl;
	}

	@Override
	public String getAssetEntryParentLayoutFriendlyUrl(
		long groupId, long articleResourcePk, String languageId)
		throws Exception {

		String friendlyUrl;

		Layout layout = getAssetEntryLayout(groupId, articleResourcePk);
		if (layout == null) {
			friendlyUrl = StringPool.BLANK;
		}
		else {
			Locale locale = LocaleUtil.fromLanguageId(languageId);
			ThemeDisplay themeDisplay =
				ServiceContextThreadLocal.getServiceContext().getThemeDisplay();
			Layout parentLayout =
				_layoutHelper.fetchByPlid(layout.getParentPlid());
			if (parentLayout != null) {
				if (themeDisplay == null) {
					String layoutUuid = parentLayout.getUuid();
					// here an asset publisher is working asynchronously
					friendlyUrl = _layoutHelper.getFriendlyUrl(
						layoutUuid, groupId, locale);
				}
				else {
					friendlyUrl = PortalUtil.getLayoutFriendlyURL(
						parentLayout, themeDisplay, locale);
				}
			}
			else {
				friendlyUrl = PortalUtil.getLayoutFriendlyURL(themeDisplay);
			}
		}
		return friendlyUrl;

	}

	@Override
	public SeoRenderBean getDefaultSeoRenderBean(
		ThemeDisplay themeDisplay, JournalArticle article)
		throws Exception {

		SeoRenderBean bean = new SeoRenderBean();

		bean.setHtmlFriendlyUrlMap(StringPool.BLANK);
		bean.setHtmlTitleMap(StringPool.BLANK);
		bean.setHtmlKeywordsMap(StringPool.BLANK);
		bean.setHtmlRobotsMap(StringPool.BLANK);
		bean.setSitemapInclude(_DEFAULT_SITEMAP_INCLUDE);
		bean.setSitemapPriority(StringPool.BLANK);
		bean.setSitemapChangefreq(_DEFAULT_SITEMAP_CHANGEFREQ);
		bean.setFriendlyUrlBase(getFriendlyUrlBase(themeDisplay, article));

		return bean;
	}

	@Override
	public List<JournalArticle> getUpdateableArticles(
		long groupId, String layoutUuid)
		throws Exception {

		return _journalArticleHelper.getUpdateableArticles(
			groupId, layoutUuid);
	}

	@Override
	public AssetEntry getLayoutAssetEntry(long plid)
		throws Exception {

		Layout layout = _layoutHelper.fetchByPlid(plid);

		List<JournalArticle> articles =
			_journalArticleHelper.getUpdateableArticles(
				layout.getGroupId(), layout.getUuid());
		AssetEntry layoutAssetEntry =
			_assetHelper.getLayoutAssetEntry(articles);

		return layoutAssetEntry;
	}

	@Override
	public SeoRenderBean getSeoRenderBean(JournalArticle article, Locale locale)
		throws Exception {

		return _layoutHelper.getSeoRenderBean(article, locale);
	}

	@Override
	public long getSeoVocabularyId(JournalArticle article)
		throws Exception {

		return _expandoHelper.getSeoVocabularyId(article);
	}

	/**
	 * Returns an array of two elements. The first element is the article from
	 * which the SEO page was generated, null if no page was generated or if the
	 * target is not a journal article; the second is the category with which
	 * the page was generated, null if another category was used.
	 * 
	 * @param classPK
	 * @param associationClassName
	 * @param associationClassPK
	 * @return
	 */
	@Override
	public Object[] getTargetSeoArticleAndCategory(
		long classPK, String associationClassName, long associationClassPK)
		throws Exception {

		Object[] result = new Object[2];
		JournalArticle article =
			getTargetSeoJournalArticle(classPK, associationClassPK);
		if (article != null) {
			result[0] = article;
			AssetCategory category = _assetHelper.getCategory(classPK);

			if (category == null) {
				_log.warn(
					"onAfter[Add|Remove]Association with a non existent category. classPK" +
						classPK);
			}
			else {
				long vaocabularyId = getSeoVocabularyId(article);
				if (vaocabularyId == category.getVocabularyId()) {
					result[1] = category;
				}
			}
		}

		return result;
	}

	@Override
	public boolean hasApprovedVersions(JournalArticle article)
		throws Exception {

		List<JournalArticle> articles =
			_journalArticleHelper.getArticlesByResourcePrimKey(
				article.getResourcePrimKey());

		boolean approvedVersions = false;
		for (JournalArticle a : articles) {
			if (a.isApproved()) {
				approvedVersions = true;
				break;
			}
		}

		return approvedVersions;
	}

	@Override
	public boolean hasChildArticles(JournalArticle article) {

		boolean result = false;

		Layout layout = article.getLayout();

		if (layout != null) {
			result = hasChildArticles(layout.getAllChildren());
		}

		return result;
	}

	@Override
	public boolean hasGeneratedPage(JournalArticle article)
		throws Exception {

		String layoutUuid = article.getLayoutUuid();
		return Validator.isNotNull(layoutUuid) &&
			_expandoHelper.isPageGenerated(
				_layoutHelper.fetchByUuidGroupId(
					layoutUuid, article.getGroupId()));
	}

	@Override
	public boolean isLatestVersion(JournalArticle article)
		throws Exception {

		boolean latestVersion = false;

		JournalArticle latestArticle =
			_journalArticleHelper.fetchLatestArticleByResourcePrimKey(
				article.getResourcePrimKey());
		if (latestArticle.getVersion() == article.getVersion()) {
			latestVersion = true;
		}

		return latestVersion;
	}

	@Override
	public boolean isPageGenerated(Layout layout)
		throws Exception {

		return _expandoHelper.isPageGenerated(layout);
	}

	@Override
	public void syncLayoutIfApplicable(JournalArticle article)
		throws Exception {

		ServiceContext sc = ServiceContextThreadLocal.getServiceContext();
		if (Validator.isNotNull(sc)) {
			HttpServletRequest req = sc.getRequest();
			if (Validator.isNotNull(req)) {
				if (isLatestVersion(article) &&
					article.getClassNameId() == JournalArticleConstants.CLASSNAME_ID_DEFAULT) {
					Layout layout = null;
					SeoBean bean = getSeoBean(req, article);

					if (bean.isGeneratePage() && !hasGeneratedPage(article)) {
						layout = generatePage(bean);
					}
					else if (hasGeneratedPage(article)) {
						layout = updatePage(bean, article);
					}

					if (Validator.isNull(layout)) {
						return;
					}

					if (article.getStatus() == WorkflowConstants.STATUS_APPROVED) {
						_layoutHelper.syncDescription(layout, article);
					}

					boolean hidden = !hasApprovedVersions(article) ||
						article.isExpired() || article.isInTrash();

					_layoutHelper.setLayoutHiddenAndHideFromSiteMap(
						article, hidden);
				}
			}
		}
	}

	@Override
	public long removeSeoVocabularyValuesIfPresent(JournalArticle article)
		throws Exception {

		long catId;

		try {
			catId = _expandoHelper.getSeoVocabularyId(article);
		}
		catch (Exception e) {
			catId = 0;
		}

		if (catId > 0) {
			_expandoHelper.removeSeoVocabularyValues(article);
		}

		return catId;
	}

	@Override
	public JournalArticle removeSeoVocabularyValuesAndAssociatedLayoutUuid(
		JournalArticle article)
		throws Exception {

		removeSeoVocabularyValuesIfPresent(article);

		// Can't remove all layout references here since this is a copy of
		// the previous.
		// All we want to do here is set the layout uuid to blank
		article = _journalArticleHelper.removeAssociatedLayoutUuid(article);

		return article;
	}

	@Override
	public void updateFriendlyUrls(Layout layout, JournalArticle article)
		throws Exception {

		_layoutHelper.updateFriendlyURLs(layout, article);
	}

	@Override
	public void updateFriendlyUrlByCategory(
		JournalArticle article, AssetCategory category)
		throws Exception {

		Map<Locale, String> readonlyPart =
			_assetHelper.getFriendlyUrlMapByCategory(category);
		_layoutHelper.updateFriendlyURLs(article, category, readonlyPart);
	}

	@Override
	public void updateFriendlyUrlForCategory(AssetCategory category)
		throws Exception {

		for (Object[] entry : getArticlesWithSeoPage(category)) {
			JournalArticle article = (JournalArticle) entry[0];
			AssetCategory articleCategory = (AssetCategory) entry[1];
			Layout layout = _layoutHelper.fetchByUuidGroupId(
				article.getLayoutUuid(), article.getGroupId());
			Map<Locale, String> readonlyPart =
				_assetHelper.getFriendlyUrlMapByCategory(articleCategory);
			Map<Locale, String> writeablePart =
				getFriendlyUrlWritablePart(layout);
			_layoutHelper.updateFriendlyURLs(
				layout, article, articleCategory, readonlyPart, writeablePart);
		}
	}

	@Override
	public void updateFriendlyUrlWithoutCategory(JournalArticle article)
		throws Exception {

		_layoutHelper.updateFriendlyURLs(article);
	}

	@Override
	public void updateLayoutFriendlyUrls(
		JournalArticle article, Layout parent, Layout child)
		throws Exception {

		_layoutHelper.updateFriendlyURLs(parent, child, article);
	}

	/**
	 * Given a category, returns a list of JournalArticle and AssetCategory
	 * pairs in which the JournalArticles are categorised by: the AssetCategory
	 * given or by any of its subcategories; there is a SEO page associated
	 * (article.getLayoutUuid != null); the associated SEO page has a URL
	 * generated starting from the vocabulary that contains the category; the
	 * AssetCategory are those specific to JournalArticle characterisation.
	 * Practically, given a category, this method finds all the JournalArticles
	 * for which that category was used to create any part of the friendlyURL of
	 * a SEO page, and this method returns a list of JournalArticle and
	 * AssetCategory in which the AssetCategory is the category of the
	 * JournalArticle that has vocabulary equal to the category given in input
	 * (it could be the same as the one given in input or any one of its child
	 * categories)
	 * 
	 * @param category
	 * @return
	 * @throws SystemException
	 * @throws PortalException
	 */
	private List<Object[]> getArticlesWithSeoPage(AssetCategory category)
		throws Exception {

		List<Object[]> result = new ArrayList<Object[]>();

		AssetEntryQuery entryQuery = new AssetEntryQuery();
		entryQuery.setClassName(JournalArticle.class.getName());
		long[] categoryIds = _assetHelper.getCategoryIds(category);

		entryQuery.setAnyCategoryIds(categoryIds);
		entryQuery.setGroupIds(new long[] {
			category.getGroupId()
		});

		for (AssetEntry entry : _assetHelper.getEntries(entryQuery)) {
			JournalArticle article =
				_journalArticleHelper.fetchLatestArticleByClassPK(
					entry.getClassPK());

			if (hasGeneratedPage(article)) {
				Object[] resultEntry =
					_expandoHelper.toResultEntry(category, entry, article);
				if (resultEntry != null) {
					result.add(resultEntry);
				}
			}
		}
		return result;

	}

	private Layout getAssetEntryLayout(long groupId, long articleResourcePk)
		throws Exception {

		Layout layout;

		JournalArticle article =
			_journalArticleHelper.fetchLatestArticleByResourcePrimKey(
				articleResourcePk);
		String layoutUuid = article.getLayoutUuid();

		if (Validator.isNull(layoutUuid)) {
			layout = null;
		}
		else {
			layout = _layoutHelper.fetchByUuidGroupId(layoutUuid, groupId);
		}
		return layout;
	}

	/**
	 * see /liferay-portal-src-6.2-ce-ga6/portal-web/docroot/html/portlet/
	 * layouts_admin/layout/details.jsp
	 * 
	 * @param themeDisplay
	 * @param article
	 * @return
	 * @throws Exception
	 */
	private String getFriendlyUrlBase(
		ThemeDisplay themeDisplay, JournalArticle article)
		throws Exception {

		StringBuilder friendlyURLBase = new StringBuilder();
		friendlyURLBase.append(themeDisplay.getPortalURL());

		Group group = _groupLocalService.getGroup(article.getGroupId());
		LayoutSet layoutSet = group.getPublicLayoutSet();

		String virtualHostname = layoutSet.getVirtualHostname();

		if (Validator.isNull(virtualHostname) ||
			(friendlyURLBase.indexOf(virtualHostname) == -1)) {
			friendlyURLBase.append(
				group.getPathFriendlyURL(false, themeDisplay));
			friendlyURLBase.append(group.getFriendlyURL());
		}

		return friendlyURLBase.toString();
	}

	private Map<Locale, String> getFriendlyUrlMap(
		Layout parentLayout, JournalArticle article, long vocabularyId)
		throws Exception {

		Map<Locale, String> friendlyURLMap;

		if (Validator.isNotNull(parentLayout)) {
			friendlyURLMap = getFriendlyUrlMapByLayout(article, parentLayout);
		}
		else {
			friendlyURLMap = _assetHelper.getFriendlyUrlMapByVocabulary(
				article, vocabularyId);
		}

		return friendlyURLMap;
	}

	private Map<Locale, String> getFriendlyUrlMapByLayout(
		JournalArticle article, Layout parent)
		throws PortalException, SystemException {

		Map<Locale, String> friendlyURLMap = new HashMap<Locale, String>();
		for (Map.Entry<Locale, String> entry : parent.getFriendlyURLMap().entrySet()) {
			String localizedTitle = article.getTitleMap().get(entry.getKey());
			if (Validator.isNotNull(localizedTitle)) {
				friendlyURLMap.put(
					entry.getKey(), FriendlyURLNormalizerUtil.normalize(
						entry.getValue() + "/" + localizedTitle));
			}
		}
		return friendlyURLMap;
	}

	private Map<Locale, String> getFriendlyUrlWritablePart(Layout layout)
		throws Exception {

		Map<Locale, String> friendlyURLMap = layout.getFriendlyURLMap();
		Map<Locale, String> result =
			new HashMap<Locale, String>(friendlyURLMap.size());
		for (Map.Entry<Locale, String> entry : friendlyURLMap.entrySet()) {
			if (entry.getValue() == null) {
				continue;
			}

			int indexOfSlash = entry.getValue().lastIndexOf(StringPool.SLASH);
			if (indexOfSlash >= 0) {
				result.put(
					entry.getKey(), entry.getValue().substring(
						indexOfSlash, entry.getValue().length()));
			}
			else {
				result.put(entry.getKey(), entry.getValue());
			}
		}
		return result;
	}

	private boolean hasChildArticles(List<Layout> layouts) {

		boolean result = false;

		if (layouts != null) {
			for (Layout layout : layouts) {
				List<JournalArticle> layoutArticles =
					_journalArticleHelper.getAllArticlesByLayout(layout);
				if (layoutArticles != null && !layoutArticles.isEmpty()) {
					result = true;
					break;
				}
			}
		}

		return result;
	}

	private Map<Locale, String> getReadOnlyPartFriendlyUrlFromCategories(
		JournalArticle article, long seoVocabularyId)
		throws Exception {

		Map<Locale, String> readOnlyPartFriendlyUrl =
			new HashMap<Locale, String>();
		AssetEntry assetEntry =
			_assetHelper.getJournalAssetEntry(article.getResourcePrimKey());
		for (AssetCategory category : assetEntry.getCategories()) {
			if (category.getVocabularyId() == seoVocabularyId) {
				readOnlyPartFriendlyUrl =
					_assetHelper.getFriendlyUrlMapByCategory(category);
			}
		}
		return readOnlyPartFriendlyUrl;
	}

	private SeoBean getSeoBean(
		HttpServletRequest request, JournalArticle article)
		throws Exception {

		SeoBean bean = new SeoBean();

		bean.setFromModifyArticleView(
			ParamUtil.getBoolean(request, ParamKeys.FROM_MODIFY_ARTICLE_VIEW));

		bean.setServiceContext(
			ServiceContextFactory.getInstance(
				JournalArticle.class.getName(), request));
		
		long companyId = _groupLocalService.getGroup(article.getGroupId()).getCompanyId();

		if (!bean.isFromModifyArticleView()) {
			_log.warn(
				"Update not triggered by article edit form -- not all seo parameters are in the request and layout defaults will be used in update where applicable");
			Layout articleLayout = article.getLayout();
			if (Validator.isNotNull(articleLayout)) {
				bean.setSeoRobots(articleLayout.getRobotsMap());
				bean.setSeoKeywords(articleLayout.getKeywordsMap());
				bean.setSeoTitle(articleLayout.getTitleMap());
				bean.setWritablePartFriendlyUrl(
					_layoutHelper.getFriendlyURLWriteablePart(article, articleLayout));
				bean.setTypeSettingsProperties(
					articleLayout.getTypeSettingsProperties());
				bean.setGeneratePage(false);
				bean.setParentPlid(articleLayout.getParentPlid());
				bean.setVocabularyId(
					_expandoHelper.getSeoVocabularyId(article));
				long layoutPrototypeId;
				if (Validator.isNotNull(
					articleLayout.getLayoutPrototypeUuid())) {
					layoutPrototypeId = _layoutHelper.getLayoutPrototypeId(
						articleLayout.getLayoutPrototypeUuid(), companyId);
				}
				else {
					layoutPrototypeId = GetterUtil.DEFAULT_LONG;
				}
				bean.setLayoutPrototypeId(layoutPrototypeId);
				bean.setEnablePrototypePageLink(
					articleLayout.getLayoutPrototypeLinkEnabled());
			}
			else {
				Map<Locale, String> emptyMap =
					LocalizationUtil.getLocalizationMap(StringPool.BLANK);
				bean.setSeoRobots(emptyMap);
				bean.setSeoKeywords(emptyMap);
				bean.setSeoTitle(emptyMap);
				bean.setWritablePartFriendlyUrl(emptyMap);
			}
		}
		else {
			bean.setSeoRobots(
				LocalizationUtil.getLocalizationMap(
					request, ParamKeys.GENERATION_SEO_ROBOTS));
			bean.setSeoKeywords(
				LocalizationUtil.getLocalizationMap(
					request, ParamKeys.GENERATION_SEO_KEYWORDS));
			bean.setSeoTitle(
				LocalizationUtil.getLocalizationMap(
					request, ParamKeys.GENERATION_SEO_TITLE));
			bean.setWritablePartFriendlyUrl(
				LocalizationUtil.getLocalizationMap(
					request, ParamKeys.GENERATION_SEO_FRIENDLY_URL));
			bean.setTypeSettingsProperties(
				PropertiesParamUtil.getProperties(
					request, ParamKeys.TYPE_SETTINGS_PROPERTIES));
			bean.setGeneratePage(
				ParamUtil.getBoolean(
					request, ParamKeys.ENABLE_PAGE_GENERATION,
					ParamValues.ENABLE_PAGE_GENERATION));
			bean.setParentPlid(
				ParamUtil.getLong(
					request, ParamKeys.GENERATION_PARENT_PLID,
					ParamValues.GENERATION_PARENT_PLID));
			bean.setVocabularyId(
				ParamUtil.getLong(
					request, ParamKeys.GENERATION_VOCABULARY,
					ParamValues.GENERATION_VOCABULARY));
			bean.setLayoutPrototypeId(
				ParamUtil.getLong(
					request, ParamKeys.GENERATION_PAGE_TEMPLATE,
					ParamValues.GENERATION_PAGE_TEMPLATE));
			bean.setEnablePrototypePageLink(
				ParamUtil.getBoolean(
					request, ParamKeys.ENABLE_PROTOTYPE_PAGE_LINK,
					ParamValues.ENABLE_PROTOTYPE_PAGE_LINK));
			bean.setArticleId(article.getArticleId());
			bean.setArticlePrimaryKey(article.getPrimaryKey());
		}

		return bean;
	}

	private JournalArticle getTargetSeoJournalArticle(
		long classPK, long associationClassPK)
		throws Exception {

		AssetEntry asset = _assetHelper.getAssetEntry(associationClassPK);

		if (asset == null) {
			return null;
		}

		if (!JournalArticle.class.getName().equals(asset.getClassName())) {
			return null;
		}

		JournalArticle article =
			_journalArticleHelper.fetchLatestArticleByClassPK(
				asset.getClassPK());
		if (article == null) {
			return null;
		}

		if (Validator.isNull(article.getLayoutUuid())) {
			// JournalArticle with no generated page
			return null;
		}

		return article;
	}

	public void removeLayoutAssociation(JournalArticle article)
		throws Exception {

		article.setLayoutUuid(null);
		removeSeoVocabularyValuesIfPresent(article);
		_journalArticleHelper.updateArticle(article);
	}

	public void remember(Layout layout)
		throws Exception {

		_expandoHelper.remember(layout);
	}

	private Layout updatePage(SeoBean bean, JournalArticle article)
		throws Exception {

		Layout layout = _layoutHelper.fetchByUuidGroupId(
			article.getLayoutUuid(), article.getGroupId());

		boolean toUpdate = false;

		Map<Locale, String> readOnlyPartFriendlyUrl =
			new HashMap<Locale, String>();
		long seoVocabularyId = getSeoVocabularyId(article);
		boolean keepOnlyWritable = false;

		if (seoVocabularyId > 0) {
			/*
			 * Page generated from categories, so the readonly part is the
			 * friendlyURL calculated from the category
			 */
			readOnlyPartFriendlyUrl = getReadOnlyPartFriendlyUrlFromCategories(
				article, seoVocabularyId);
			if (readOnlyPartFriendlyUrl.isEmpty()) {
				/*
				 * Case in which an article has no vocabulary category in which
				 * a page has been generated
				 */
				keepOnlyWritable = true;
			}
		}
		else {
			// Pagina generata a partire da una pagina parent, quindi la parte
			// readonly è la friendlyUrl del padre
			Layout parentLayout =
				_layoutHelper.fetchByPlid(layout.getParentPlid());
			if (parentLayout == null) {
				/*
				 * If the root page (should not ever occur) then the readonly
				 * part is an empty string for all languages. During the merge
				 * only locales of the writeable part are kept
				 */
				keepOnlyWritable = true;
			}
			else {
				readOnlyPartFriendlyUrl = parentLayout.getFriendlyURLMap();
			}
		}

		_layoutHelper.updateFriendlyURLs(
			keepOnlyWritable, readOnlyPartFriendlyUrl, article, layout, bean);

		if (bean.isFromModifyArticleView()) {
			if (!layout.getTitleMap().equals(bean.getSeoTitle())) {
				toUpdate = true;
				layout.setTitleMap(bean.getSeoTitle());
			}
			if (!layout.getKeywordsMap().equals(bean.getSeoKeywords())) {
				toUpdate = true;
				layout.setKeywordsMap(bean.getSeoKeywords());
			}
			if (!layout.getRobotsMap().equals(bean.getSeoRobots())) {
				toUpdate = true;
				layout.setRobotsMap(bean.getSeoRobots());
			}
			if (!layout.getTypeSettingsProperties().equals(
				bean.getTypeSettingsProperties())) {
				toUpdate = true;
				UnicodeProperties p = layout.getTypeSettingsProperties();
				p.putAll(bean.getTypeSettingsProperties());
				layout.setTypeSettingsProperties(p);
			}
		}

		if (toUpdate) {
			layout = _layoutHelper.update(layout);
		}

		return layout;
	}

	@Reference
	private CompanyLocalService _companyLocalService;

	@Reference
	private GroupLocalService _groupLocalService;

	@Reference
	private AssetHelper _assetHelper;

	@Reference
	private ExpandoHelper _expandoHelper;

	@Reference
	private LayoutHelper _layoutHelper;

	@Reference
	private JournalArticleHelper _journalArticleHelper;

	@Reference
	private UserLocalService _userLocalService;
	
	private static final Log _log =
		LogFactoryUtil.getLog(PageGeneratorServiceImpl.class);

	private static final String _DEFAULT_SITEMAP_CHANGEFREQ = "always";

	private static final String _DEFAULT_SITEMAP_INCLUDE = "1";

}
